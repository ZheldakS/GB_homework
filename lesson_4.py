# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
kol_h, st_h, pr = map(int,argv[1:])
res = (kol_h * st_h) + pr
print('Зароботная плата: ', res)


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
#

ish = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
res = []
res = [ish[i] for i in range(1,len(ish),1) if ish[i] > ish[i-1]]
print(res)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
#

print([i for i in range(20,241,1) if i % 20 ==0 or i % 21 ==0])


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#

ish = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([ i for i in ish if ish.count(i) == 1])



# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
#
from functools import reduce
def pr(a, b):
    return a * b
ish_sp = [i for i in range(100,1001,2)] # нет смысла использовать if когда можно сразу задать вывод четных чисел через range
res = reduce(pr,ish_sp)
print(res)


# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

#script 1  в скрипт передается начало и окончание генерирумой последовательности
from sys import argv
from itertools import count
stt, stp = map(int,argv[1:])
for i in count(stt):
    print(i)
    if i == stp:
        break


#script 2 в скрипт передается количество повторений заданного списка
from sys import argv
from itertools import cycle
povt = int(argv[1]) #количество повторений
ish = [2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11] # исходный список
povt = povt * len(ish) #для полного отображения списка количесво эл списка умножается на требуемое количество повторений
i = 0
for el in cycle(ish):
    print(el)
    i += 1
    if i == povt:
        break



# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    j=1
    for i in range(1,n+1,1):
        j = j * i
        yield j
s=0
n=int(input('Введите искомый факториал: '))
for i in fact(n):
    s += 1
    print(f'{s}! {i}')



