# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# spisok=[1,3.5,76,'Masha',[1,2,3,4],None]
# for s in spisok:
#     print(f'{s}  {type(s)}')
# print(spisok)



# 2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input().


# вариант 1 по заданию 2 c сортировкой внутри списка
# spisok = (input('Ведите через пробел даные списка').split())
# print('Исходный список  ', spisok)
# if len(spisok)%2 > 0:
#     kol=len(spisok)-1
# else:
#     kol=len(spisok)
# for i in range(0,kol,2):
#     a = spisok.pop(i+1)
#     spisok.insert(i, a)
# print('Результат  ', spisok)



# вариант 2 с использованием второго списка
# сделан ради интереса с готовым списком
# spisok=[1,3.5,76,'Masha',[1,2,3,4],None,7]
# spisok_1=[]
# if len(spisok)%2 > 0:
#     kol=len(spisok)-1
# else:
#     kol=len(spisok)
# for i in range(0,kol,2):
#     spisok_1.insert(i, spisok[i+1])
#     spisok_1.insert((i+1), spisok[i])
# if len(spisok)%2 > 0:
#     spisok_1.append(spisok[-1])
# print(spisok)
# print(spisok_1)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.

# вариант 1 Dict
# time_year = {'Winter':[12,1,2], 'Spring':[3,4,5], 'Sammer':[6,7,8], 'Autumn':[9,10,11]}
# month = int(input('Введите номер месяца  '))
# for i in time_year:
#     if month in time_year[i]:
#         print(i)

# вариант 2 list как я понял
# winter = [12,1,2]
# spring = [3,4,5]
# sammer = [6,7,8]
# autumn = [9,10,11]
# month = int(input('Введите номер месяца  '))
# if month in winter:
#     print('winter')
# elif month in spring:
#     print('spring')
# elif month in autumn:
#     print('autumn')
# else:
#     print('sammer')
#


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

# Вариант 1 счетчик
# tekst = input('Введите строку (несколько слов через пробел)   ').split()
# i = 0
# for slovo in tekst:
#     i += 1
#     print(f'{i}   {slovo[0:10]}')

# Вариант 2 enumerate
# tekst = input('Введите строку (несколько слов через пробел)   ').split()
# for i, slovo in enumerate(tekst):
#     print(f'{i+1}   {slovo[0:10]}')

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
#

# my_list = [7, 5, 3, 3, 2]
# new_el = int(input("Введите новый элемент  "))
# i=len(my_list)-1
# while i >0:
#     if new_el <= my_list[i]:
#         my_list.insert(i+1, new_el)
#         break
#     i -= 1
# print(my_list)
#



# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара: название, цена, количество, единица измерения. Структуру нужно сформировать программно, запросив все данные у пользователя.
# Пример готовой структуры:
#
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
#
# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, название. Тогда значение — список значений-характеристик, например, список названий товаров.
# Пример:
#
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

def slov(i):
    ''' передается счетчик итераций   '''
    strukt = ("Название", "Цена", "Количество", "Ед. Изм.")
    st = dict.fromkeys(strukt)
    for k in strukt:
        st[k] = input(f'Введите {k} :  ')
    stk = (i,st,)
    return stk

strukt=( "Название", "Цена", "Количество", "Ед. Изм.")
sp=[]
j=1
while True:  # организация "бесконечного" ввода
    sp.append(slov(j))
    j += 1
    if input('для окончания ввода введите stop, для продолжения Enter : ') == 'stop':
        break
print("итоговая структура данных: ")
print(sp)

result = dict.fromkeys(strukt) # групперует данные по типам из структуры
for i in strukt:
    res=[]
    for j in sp:
        res.append(j[1].get(i))
    result.update({i:res})
print('Итоговый результат:')
print(result)


